/*
 *
 *  Created on: Sep 23, 2022
 *      Author:tabitha dorcas sinde
/*
import java.util.ArrayList;
import java.util.ollections;
import java.util.List;

public class TaskService {

public static List<Task> tasks = new ArrayList<>();// i am creating a static instance of ArrayList of Task
public static void main(String[] args) {

TaskService service = new TaskService();//i am creating an instance of TaskService 
//i am using the instance variable service and invoke addTask(Task) method that accept an instance of Task object
//using the 3 Valid task record
service.addTask(new Task("0000000001", "Reading", "Read Diary"));
service.addTask(new Task("0000000002", "Playing", "Playstation 7"));
service.addTask(new Task("0000000003", "Walking", "Walk Tiggy"));

//i am displaying all added and updated Task object
for (Task obj : tasks) {
System.out.println(obj);
}

//i am creating an existing task ID
service.addTask(new Task("0000000001", "Singing", "Marriage proposal"));
System.out.println("Delete Task ID 0000000002");

service.deleteTask("0000000002");
System.out.println("Update Task ID 0000000003");

service.update(new Task("0000000003", "Running", "Jogging with Mercy"));
 for(Task obj : tasks) {
 System.out.println(obj);//displaying all added and updated Task object
 }
 
 }
 
 /**
 *
 *@param task -Task class containing id,name &description variables
 *
 *add Task object if List is empty and passed all field validations
 *
 */
 public booelan addTask(Task task) {
 int index = getIndex(task);
 
 if(index < 0 && validateId(task.getId()) && validateName(task.getName()) && validateDescription(task.getDescription()) {
 tasks.add(task);
 return true;
 }
 
 return false;
 }
 
 /**
 *
 *@param id
 *
 *delete Task object when Task ID exist
 *
 */
 public void deleteTask(String id) {
 int index = getIndex(new Task(id, "", ""));//creating new instance of task object and pass the string id in the constructor
 if(index >= 0)//i am checking if index is greater or equal to 0
  tasks.remove(index);
  }
  
  /**
  *
  *@param task
  *
  *update Task object if same ID and valid name and description
  */
  public void update(Task task) {
   for (Task obj : tasks) {
   if(obj.equals(task) && validateName(task.getName()) && validateDescription(task.getDescription()) {
   
   obj.setName(task.getName());
   
   obj.setDescription(task.getDescription());
   }
   
  }
  
  }
  
  /**
  *
  *@param task
  *return integer data type
  *
  *use collections binary search by Task ID 
  *return positive integer if ID is found
  *return negative integer if ID is not found
  */
  public int getIndex(Task task) {
  int index = Collections.binarySearch(tasks, task, Task.compareById);
  return index;
  }
  
  /**
  *
  *@param id
  @return true or false
  *
  *validate id parameter, if its not null and length is less than equal to 10
  */
  public boolean validateID(String id) {
   if(id != null && id.length() <= 10)
   return true;
   
   return false;
   }
   
   /**
   *
   *@param name
   *@return true or false
   *
   *validate name parameter, if its not null and length is not less than or equal to 20
   */
   public boolean validateName(String name) {
    if(name !=null && name.length() <= 20)
    return true;
    
    return false;
    }
    
    /**
    *
    *@param description
    *@return true or false
    *
    *validate
 
 

